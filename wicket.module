<?php

use Drupal\wicket\Form\wicketSettingsForm;

/**
 * Loads the PHP SDK
 */
function wicket_api_client() {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  static $client;

  if ($client === NULL) {
    try {
      // Wicket SDK being included as part of the main composer.json
      // likely using the "merge-plugin" approach
      if (!class_exists('\Wicket\Client')) {
        // No library available!
        return FALSE;
      }

      $config = \Drupal::config('wicket.settings');

      $app_key = $config->get(wicketSettingsForm::FORM_ID . '_app_key');
      $api_endpoint = $config->get(wicketSettingsForm::FORM_ID . '_api_endpoint');
      $secret_key = $config->get(wicketSettingsForm::FORM_ID . '_secret_key');
      $person_id = $config->get(wicketSettingsForm::FORM_ID . '_person_id');

      $client = new \Wicket\Client($app_key, $secret_key, $api_endpoint);
      $client->authorize($person_id);
      // test the endpoint before returning the client to ensure it's up
      $client->get($api_endpoint);
      $client->locale = $language;
    }
    catch (\Exception $e) {
      // don't return the $client unless the API is up.
      return false;
    }
  }
  return $client;
}

function wicket_api_client_current_user() {
  $client = wicket_api_client();

  if ($client) {
    $userData = \Drupal::service('user.data');
    $user = \Drupal::currentUser();
    $person_id = $userData->get('wicket', $user->id(), 'personUuid');

    if ($person_id) {
      $client->authorize($person_id);
    } else {
      $client = null;
    }
  }

  return $client;
}

function wicket_get_person_by_id($uuid){
  static $person;

  if ($uuid) {
    $client = wicket_api_client();
    $person = $client->people->fetch($uuid);
    return $person;
  }
}

function wicket_get_person_roles_by_id($uuid){
  static $person;
  $person = wicket_get_person_by_id($uuid);
  $variants = $person->included()->filter(function ($item) {
    return isset($item['type']) && $item['type'] == 'roles';
  });

  $roles = [];
  foreach ($variants->all() as $role) {
    // if this role has an associated ORG, get its name and add as a suffix
    $role_id = str_replace('-','_',$role['id']);
    if (isset($role['relationships']['resource']['data']['id'])) {
      $org_id = $role['relationships']['resource']['data']['id'];
      $client = wicket_api_client();
      $org = $client->organizations->fetch($org_id);
      // convert dashes to underscores for Drupal's role machine name. It doesn't accept dashes
      $roles[$role_id] = $org->legal_name.' - '.$role['attributes']['name'];
    }else {
      $roles[$role_id] = $role['attributes']['name'];
    }
  }
  return $roles;
}
